#!/usr/bin/python

# ============================== 字符数据类型 =======================================

# 字符串 常用的数据类型，使用 ' 或 " 进行创建

str1 = "hello world!!"
str2 = '食屎啦嘞'

print(str1)
print(str2)

# 字符串截取

print(str1[1:3])

print(str2[-1])



# 字符转义使用反斜杠（\）

print('\a')
print ('hello\000world')

# 字符串运算

namestr = '亡命之徒'

statusstr= "单身狗"
# 字符链接
print(statusstr + namestr)

# 重复输出
print(statusstr * 2)

# 判断字符串是否包含某个特定字符 
print('狗' in statusstr)
print('亡' not in statusstr)

# 将所有字符串按照字面意思来使用，没有转义特殊或不能打印的字符
print('yes\no')
print(r"yes\no")

# 格式化字符串
print("我是 %s 也叫 %s" %(namestr, statusstr))

# 三引号

helpstr = """
        IS: python [OPTIONS]
            -h          Display this IS message
            -t          exit
            """
print(helpstr)

# 字符内建函数

# capitalize() 该函数将字符首字母转大写
str1.capitalize()

# lower() 该函数将字符串中的所有大写字符转小写
str1.lower()

# upper() 该函数将字符中的小写字符转大写
str1.upper()


#============================================ 分割线 =============================================

# ============================================ 数据结构 ==========================================

#============================= List 列表 =========================================================

# 列表使用中括号 []
list1 = ['白切鸡', '芹菜肉丝', '土豆炒肉', '梅菜扣肉', '小炒鱼', '烤羊排']
list2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
list3 = ['F', "e", "d", 'c', 'b', 'a', 9, 8, 7, 6]

# 访问列表 使用 [] 和下标索引来访问列表里的值
print(list1[3])
print(list3[1:5])

# len() 该函数返回指定参数的长度
print(len(list2))

# 列表元素新增 使用 append() 函数
list1.append('回锅肉')
print(list1)

# 列表元素更新
list3[0] = 'f'
print(list3)

# del() 该函数可以用于列表，集合以及字典的操作，也可用于删除定义的变量

del(list2[3])
print(list2)

#del(list2)

# 列表的 操作符 + 和 * 效果和字符串的查不到

print(list1 + list3)
print(list1 * 3)

# 列表的其他操作函数

# count() 统计元素在列表里出现的次数
print(list3.count("a"))

#===============================================================================================================
#=========================== 元组 ===============================================================================
# 元组的定义是使用小括号(); 元组的元素不可被修改

tuple1 = ()
tuple2 = ("python", "C/C++", "JAVA")
tuple3 = (1,2,3,4,5)
tuple4 = ('hello',)

print(bool(tuple1))

print(tuple2)
print(tuple3[0:2])

print(tuple4 * 3)

#==================================================================================================================
#=========================== 字典 ==================================================================================

# 字典，以键值对的方式存储数据 用大括号定意，每对数据用英文逗号(,)隔开，键值之间用冒号隔开

dic1 = {}
dic2 = {"name":"亡命之徒", "age":22, "sex":"男"}

# 访问字典 同过 key 来过去 值
print(dic2["name"])

# 修改字典 
print(dic2["age"])
dic2["age"] = 9999
print(dic2["age"])

# 删除字典元素

del(dic2["name"])

print(dic2)

# 字典特性：发现我接触过的语言中key-value 形式的数据结构都具有的差不多这样的特性
#           字典里的 key 不可以出现多次，赋值时一个键多次赋值始终被最后一个值覆盖
#           key 不可被改变，所以不可以用列表
#=====================================================================================================================


#============================= 集合 =========================================================================================

# 集合由多种不同的元素组成是一个不可重复的无序的元素序列，Python提供了两种集合：可变集合和不可变集合

# 定义集合 可使用 大括号{}和set()

# 空集合 使用 set() ; {}:用于定义空字典

nullset = set()

set1 = {"a",1,'b'}


set2 = set('12345678avbd')

# 集合的遍历；由于集合是无序的，所以不可以像列表那样创建索引或切片操作，只能使用for循环
# 或者使用 in/not in来访问和判断集合元素

print("a" in set1)

print("c" not in set2)


for item in set2:
    print(item)

# 集合元素的添加
set2.add("xxxxxx")
print(set2)
 
 # 集合元素的修改
set2.update([3,2])
print(set2)

# 集合元素的移除
set2.remove("a")
print(set2)

# 求并集
nullset = nullset.union(set1,set2)
print(nullset)

# intersection() 该函数用户返回多集合的交集

# difference() 该函数用于返回多个集合的补集
#=======================================================================

# 其他操作的函数

# clear() 该函数用于移除集合或列表中的所有元素
set1.clear()

# copy() 该函数用于复制一个集合，列表
set1 = set2.copy()

# pop() 该函数用于随机移除集合，字典或列表中的一个元素
set1.pop()

